import os
import glob

def _replace_patterns(fn_source, fn_target, patterns):
    with open(fn_source) as infile:
        with open(fn_target, 'w') as outfile:
            for line in infile:
                for old, new in patterns:
                  line = line.replace(old, new)
                outfile.write(line)

def _fix_paths(source, target, env):
    assert len(source) == len(target)
    for src, tgt in zip(source, target):
        _replace_patterns(str(src), str(tgt), [('.ipynb', '.html')])


def _obfuscate_paths(source, target, env):
    assert len(source) == len(target)
    for src, tgt in zip(source, target):
        cwd = os.path.abspath(str(src)).split('/')
        root_index = cwd.index('signac-examples')
        real_wd = os.path.join(* cwd[:root_index])
        fake_wd = os.path.join('home', 'johndoe')
        _replace_patterns(str(src), str(tgt), [(real_wd, fake_wd)])


def jupyter_html_(source, target, env, for_signature):
  "Work-around for jupyter bug: https://github.com/jupyter/nbconvert/issues/293"
  out = os.path.abspath(str(target[0]))
  return 'jupyter nbconvert --to html --output={} {}'.format(out, source[0])

def jupyter_nb_(source, target, env, for_signature):
  "Work-around for jupyter bug: https://github.com/jupyter/nbconvert/issues/293"
  out = os.path.abspath(str(target[0]))
  return 'jupyter nbconvert --ExecutePreprocessor.timeout=600 --to notebook --output={} --execute {}'.format(out, source[0])


jupyter_nb = Builder(
  generator=jupyter_nb_,
  prefix='static/',
  suffix='in.ipynb',
  src_suffix='.ipynb')

jupyter_html = Builder(
  generator=jupyter_html_,
  suffix='in.html',
  src_suffix='.ipynb')

obfuscate_paths = Builder(
  action=_obfuscate_paths,
  src_suffix='in.ipynb',
  suffix='.ipynb')

fix_html_paths = Builder(
  action=_fix_paths,
  #prefix='html/',
  src_suffix='in.html',
  suffix='.html')

env = Environment(
  ENV = {'PATH': os.environ['PATH']},
  BUILDERS={
      'jupyter_nb': jupyter_nb,
      'jupyter_html': jupyter_html,
      'fix_html_paths': fix_html_paths,
      'obfuscate_paths': obfuscate_paths,
  })

NOTEBOOKS = glob.glob('*.ipynb')
for nb in sorted(NOTEBOOKS):
  env.fix_html_paths(env.jupyter_html(env.obfuscate_paths(env.jupyter_nb(nb))))
